// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region Domain.Interface.IGame

namespace Domain.Interface
{
    [PayloadTable(typeof(IGame), PayloadTableKind.Request)]
    public static class IGame_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Join_Invoke), typeof(Join_Return) },
                { typeof(Leave_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class Join_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.Int64 userId;
            [ProtoMember(2)] public System.String userName;
            [ProtoMember(3)] public Domain.Interface.IGameObserver observer;
            [ProtoMember(4)] public Domain.Interface.IGameUserObserver observerForUserActor;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGame)__target).Join(userId, userName, observer, observerForUserActor);
                return (IValueGetable)(new Join_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
                if (observerForUserActor != null)
                {
                    updater(observerForUserActor);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class Join_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, Domain.Interface.GameInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public object Value
            {
                get { return v; }
            }
        }

        [ProtoContract, TypeAlias]
        public class Leave_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGame)__target).Leave(userId);
                return null;
            }
        }
    }

    public interface IGame_NoReply
    {
        void Join(System.Int64 userId, System.String userName, Domain.Interface.IGameObserver observer, Domain.Interface.IGameUserObserver observerForUserActor);
        void Leave(System.Int64 userId);
    }

    public class GameRef : InterfacedActorRef, IGame, IGame_NoReply
    {
        public GameRef() : base(null)
        {
        }

        public GameRef(IActorRef actor) : base(actor)
        {
        }

        public GameRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGame_NoReply WithNoReply()
        {
            return this;
        }

        public GameRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GameRef(Actor, requestWaiter, Timeout);
        }

        public GameRef WithTimeout(TimeSpan? timeout)
        {
            return new GameRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<System.Int32, Domain.Interface.GameInfo>> Join(System.Int64 userId, System.String userName, Domain.Interface.IGameObserver observer, Domain.Interface.IGameUserObserver observerForUserActor)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Join_Invoke { userId = userId, userName = userName, observer = observer, observerForUserActor = observerForUserActor }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, Domain.Interface.GameInfo>>(requestMessage);
        }

        public Task Leave(System.Int64 userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Leave_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGame_NoReply.Join(System.Int64 userId, System.String userName, Domain.Interface.IGameObserver observer, Domain.Interface.IGameUserObserver observerForUserActor)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Join_Invoke { userId = userId, userName = userName, observer = observer, observerForUserActor = observerForUserActor }
            };
            SendRequest(requestMessage);
        }

        void IGame_NoReply.Leave(System.Int64 userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Leave_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIGame
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIGame Convert(IGame value)
        {
            if (value == null) return null;
            return new SurrogateForIGame { Actor = ((GameRef)value).Actor };
        }

        [ProtoConverter]
        public static IGame Convert(SurrogateForIGame value)
        {
            if (value == null) return null;
            return new GameRef(value.Actor);
        }
    }
}

#endregion
#region Domain.Interface.IGamePairMaker

namespace Domain.Interface
{
    [PayloadTable(typeof(IGamePairMaker), PayloadTableKind.Request)]
    public static class IGamePairMaker_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(RegisterPairing_Invoke), null },
                { typeof(UnregisterPairing_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class RegisterPairing_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.Int64 userId;
            [ProtoMember(2)] public System.String userName;
            [ProtoMember(3)] public Domain.Interface.IUserPairingObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IGamePairMaker);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGamePairMaker)__target).RegisterPairing(userId, userName, observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class UnregisterPairing_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;

            public Type GetInterfaceType()
            {
                return typeof(IGamePairMaker);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGamePairMaker)__target).UnregisterPairing(userId);
                return null;
            }
        }
    }

    public interface IGamePairMaker_NoReply
    {
        void RegisterPairing(System.Int64 userId, System.String userName, Domain.Interface.IUserPairingObserver observer);
        void UnregisterPairing(System.Int64 userId);
    }

    public class GamePairMakerRef : InterfacedActorRef, IGamePairMaker, IGamePairMaker_NoReply
    {
        public GamePairMakerRef() : base(null)
        {
        }

        public GamePairMakerRef(IActorRef actor) : base(actor)
        {
        }

        public GamePairMakerRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGamePairMaker_NoReply WithNoReply()
        {
            return this;
        }

        public GamePairMakerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GamePairMakerRef(Actor, requestWaiter, Timeout);
        }

        public GamePairMakerRef WithTimeout(TimeSpan? timeout)
        {
            return new GamePairMakerRef(Actor, RequestWaiter, timeout);
        }

        public Task RegisterPairing(System.Int64 userId, System.String userName, Domain.Interface.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePairMaker_PayloadTable.RegisterPairing_Invoke { userId = userId, userName = userName, observer = observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UnregisterPairing(System.Int64 userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePairMaker_PayloadTable.UnregisterPairing_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGamePairMaker_NoReply.RegisterPairing(System.Int64 userId, System.String userName, Domain.Interface.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePairMaker_PayloadTable.RegisterPairing_Invoke { userId = userId, userName = userName, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IGamePairMaker_NoReply.UnregisterPairing(System.Int64 userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePairMaker_PayloadTable.UnregisterPairing_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIGamePairMaker
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIGamePairMaker Convert(IGamePairMaker value)
        {
            if (value == null) return null;
            return new SurrogateForIGamePairMaker { Actor = ((GamePairMakerRef)value).Actor };
        }

        [ProtoConverter]
        public static IGamePairMaker Convert(SurrogateForIGamePairMaker value)
        {
            if (value == null) return null;
            return new GamePairMakerRef(value.Actor);
        }
    }
}

#endregion
#region Domain.Interface.IGamePlayer

namespace Domain.Interface
{
    [PayloadTable(typeof(IGamePlayer), PayloadTableKind.Request)]
    public static class IGamePlayer_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(MakeMove_Invoke), null },
                { typeof(Say_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class MakeMove_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadTagOverridable
        {
            [ProtoMember(1)] public Domain.Game.PlacePosition pos;
            [ProtoMember(2)] public System.Int64 playerUserId;

            public Type GetInterfaceType()
            {
                return typeof(IGamePlayer);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGamePlayer)__target).MakeMove(pos, playerUserId);
                return null;
            }

            void IPayloadTagOverridable.SetTag(object value)
            {
                playerUserId = (System.Int64)value;
            }
        }

        [ProtoContract, TypeAlias]
        public class Say_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadTagOverridable
        {
            [ProtoMember(1)] public System.String msg;
            [ProtoMember(2)] public System.Int64 playerUserId;

            public Type GetInterfaceType()
            {
                return typeof(IGamePlayer);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGamePlayer)__target).Say(msg, playerUserId);
                return null;
            }

            void IPayloadTagOverridable.SetTag(object value)
            {
                playerUserId = (System.Int64)value;
            }
        }
    }

    public interface IGamePlayer_NoReply
    {
        void MakeMove(Domain.Game.PlacePosition pos, System.Int64 playerUserId = 0);
        void Say(System.String msg, System.Int64 playerUserId = 0);
    }

    public class GamePlayerRef : InterfacedActorRef, IGamePlayer, IGamePlayer_NoReply
    {
        public GamePlayerRef() : base(null)
        {
        }

        public GamePlayerRef(IActorRef actor) : base(actor)
        {
        }

        public GamePlayerRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGamePlayer_NoReply WithNoReply()
        {
            return this;
        }

        public GamePlayerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GamePlayerRef(Actor, requestWaiter, Timeout);
        }

        public GamePlayerRef WithTimeout(TimeSpan? timeout)
        {
            return new GamePlayerRef(Actor, RequestWaiter, timeout);
        }

        public Task MakeMove(Domain.Game.PlacePosition pos, System.Int64 playerUserId = 0)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePlayer_PayloadTable.MakeMove_Invoke { pos = pos, playerUserId = playerUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Say(System.String msg, System.Int64 playerUserId = 0)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePlayer_PayloadTable.Say_Invoke { msg = msg, playerUserId = playerUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGamePlayer_NoReply.MakeMove(Domain.Game.PlacePosition pos, System.Int64 playerUserId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePlayer_PayloadTable.MakeMove_Invoke { pos = pos, playerUserId = playerUserId }
            };
            SendRequest(requestMessage);
        }

        void IGamePlayer_NoReply.Say(System.String msg, System.Int64 playerUserId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGamePlayer_PayloadTable.Say_Invoke { msg = msg, playerUserId = playerUserId }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIGamePlayer
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIGamePlayer Convert(IGamePlayer value)
        {
            if (value == null) return null;
            return new SurrogateForIGamePlayer { Actor = ((GamePlayerRef)value).Actor };
        }

        [ProtoConverter]
        public static IGamePlayer Convert(SurrogateForIGamePlayer value)
        {
            if (value == null) return null;
            return new GamePlayerRef(value.Actor);
        }
    }
}

#endregion
#region Domain.Interface.IUser

namespace Domain.Interface
{
    [PayloadTable(typeof(IUser), PayloadTableKind.Request)]
    public static class IUser_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(JoinGame_Invoke), typeof(JoinGame_Return) },
                { typeof(LeaveGame_Invoke), null },
                { typeof(RegisterPairing_Invoke), null },
                { typeof(UnregisterPairing_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class JoinGame_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.Int64 gameId;
            [ProtoMember(2)] public Domain.Interface.IGameObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IUser)__target).JoinGame(gameId, observer);
                return (IValueGetable)(new JoinGame_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class JoinGame_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            [ProtoMember(1)] public System.Tuple<Domain.Interface.IGamePlayer, System.Int32, Domain.Interface.GameInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    if (v.Item1 != null) updater(v.Item1);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class LeaveGame_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IUser)__target).LeaveGame(gameId);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class RegisterPairing_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public Domain.Interface.IUserPairingObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IUser)__target).RegisterPairing(observer);
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class UnregisterPairing_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IUser)__target).UnregisterPairing();
                return null;
            }
        }
    }

    public interface IUser_NoReply
    {
        void JoinGame(System.Int64 gameId, Domain.Interface.IGameObserver observer);
        void LeaveGame(System.Int64 gameId);
        void RegisterPairing(Domain.Interface.IUserPairingObserver observer);
        void UnregisterPairing();
    }

    public class UserRef : InterfacedActorRef, IUser, IUser_NoReply
    {
        public UserRef() : base(null)
        {
        }

        public UserRef(IActorRef actor) : base(actor)
        {
        }

        public UserRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IUser_NoReply WithNoReply()
        {
            return this;
        }

        public UserRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserRef(Actor, requestWaiter, Timeout);
        }

        public UserRef WithTimeout(TimeSpan? timeout)
        {
            return new UserRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<Domain.Interface.IGamePlayer, System.Int32, Domain.Interface.GameInfo>> JoinGame(System.Int64 gameId, Domain.Interface.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.JoinGame_Invoke { gameId = gameId, observer = observer }
            };
            return SendRequestAndReceive<System.Tuple<Domain.Interface.IGamePlayer, System.Int32, Domain.Interface.GameInfo>>(requestMessage);
        }

        public Task LeaveGame(System.Int64 gameId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.LeaveGame_Invoke { gameId = gameId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task RegisterPairing(Domain.Interface.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.RegisterPairing_Invoke { observer = observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UnregisterPairing()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.UnregisterPairing_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUser_NoReply.JoinGame(System.Int64 gameId, Domain.Interface.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.JoinGame_Invoke { gameId = gameId, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.LeaveGame(System.Int64 gameId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.LeaveGame_Invoke { gameId = gameId }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.RegisterPairing(Domain.Interface.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.RegisterPairing_Invoke { observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.UnregisterPairing()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.UnregisterPairing_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIUser
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIUser Convert(IUser value)
        {
            if (value == null) return null;
            return new SurrogateForIUser { Actor = ((UserRef)value).Actor };
        }

        [ProtoConverter]
        public static IUser Convert(SurrogateForIUser value)
        {
            if (value == null) return null;
            return new UserRef(value.Actor);
        }
    }
}

#endregion
#region Domain.Interface.IUserLogin

namespace Domain.Interface
{
    [PayloadTable(typeof(IUserLogin), PayloadTableKind.Request)]
    public static class IUserLogin_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Login_Invoke), typeof(Login_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class Login_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.String id;
            [ProtoMember(2)] public System.String password;
            [ProtoMember(3)] public Domain.Interface.IUserEventObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUserLogin);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IUserLogin)__target).Login(id, password, observer);
                return (IValueGetable)(new Login_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class Login_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            [ProtoMember(1)] public Domain.Interface.LoginResult v;

            public Type GetInterfaceType()
            {
                return typeof(IUserLogin);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    if (v.User != null) updater(v.User);
                }
            }
        }
    }

    public interface IUserLogin_NoReply
    {
        void Login(System.String id, System.String password, Domain.Interface.IUserEventObserver observer);
    }

    public class UserLoginRef : InterfacedActorRef, IUserLogin, IUserLogin_NoReply
    {
        public UserLoginRef() : base(null)
        {
        }

        public UserLoginRef(IActorRef actor) : base(actor)
        {
        }

        public UserLoginRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IUserLogin_NoReply WithNoReply()
        {
            return this;
        }

        public UserLoginRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserLoginRef(Actor, requestWaiter, Timeout);
        }

        public UserLoginRef WithTimeout(TimeSpan? timeout)
        {
            return new UserLoginRef(Actor, RequestWaiter, timeout);
        }

        public Task<Domain.Interface.LoginResult> Login(System.String id, System.String password, Domain.Interface.IUserEventObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observer = observer }
            };
            return SendRequestAndReceive<Domain.Interface.LoginResult>(requestMessage);
        }

        void IUserLogin_NoReply.Login(System.String id, System.String password, Domain.Interface.IUserEventObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observer = observer }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserLogin
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIUserLogin Convert(IUserLogin value)
        {
            if (value == null) return null;
            return new SurrogateForIUserLogin { Actor = ((UserLoginRef)value).Actor };
        }

        [ProtoConverter]
        public static IUserLogin Convert(SurrogateForIUserLogin value)
        {
            if (value == null) return null;
            return new UserLoginRef(value.Actor);
        }
    }
}

#endregion
#region Domain.Interface.IGameObserver

namespace Domain.Interface
{
    [PayloadTable(typeof(IGameObserver), PayloadTableKind.Notification)]
    public static class IGameObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Abort_Invoke),
                typeof(Begin_Invoke),
                typeof(End_Invoke),
                typeof(Join_Invoke),
                typeof(Leave_Invoke),
                typeof(MakeMove_Invoke),
                typeof(Say_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class Abort_Invoke : IInterfacedPayload, IInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Abort();
            }
        }

        [ProtoContract, TypeAlias]
        public class Begin_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int32 currentPlayerId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Begin(currentPlayerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class End_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int32 winnerPlayerId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).End(winnerPlayerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Join_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int32 playerId;
            [ProtoMember(2)] public System.Int64 userId;
            [ProtoMember(3)] public System.String userName;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Join(playerId, userId, userName);
            }
        }

        [ProtoContract, TypeAlias]
        public class Leave_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int32 playerId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Leave(playerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class MakeMove_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int32 playerId;
            [ProtoMember(2)] public Domain.Game.PlacePosition pos;
            [ProtoMember(3)] public System.Int32 nextTurnPlayerId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).MakeMove(playerId, pos, nextTurnPlayerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Say_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int32 playerId;
            [ProtoMember(2)] public System.String msg;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Say(playerId, msg);
            }
        }
    }

    public class GameObserver : InterfacedObserver, IGameObserver
    {
        public GameObserver()
            : base(null, 0)
        {
        }

        public GameObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public GameObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void Abort()
        {
            var payload = new IGameObserver_PayloadTable.Abort_Invoke {  };
            Notify(payload);
        }

        public void Begin(System.Int32 currentPlayerId)
        {
            var payload = new IGameObserver_PayloadTable.Begin_Invoke { currentPlayerId = currentPlayerId };
            Notify(payload);
        }

        public void End(System.Int32 winnerPlayerId)
        {
            var payload = new IGameObserver_PayloadTable.End_Invoke { winnerPlayerId = winnerPlayerId };
            Notify(payload);
        }

        public void Join(System.Int32 playerId, System.Int64 userId, System.String userName)
        {
            var payload = new IGameObserver_PayloadTable.Join_Invoke { playerId = playerId, userId = userId, userName = userName };
            Notify(payload);
        }

        public void Leave(System.Int32 playerId)
        {
            var payload = new IGameObserver_PayloadTable.Leave_Invoke { playerId = playerId };
            Notify(payload);
        }

        public void MakeMove(System.Int32 playerId, Domain.Game.PlacePosition pos, System.Int32 nextTurnPlayerId)
        {
            var payload = new IGameObserver_PayloadTable.MakeMove_Invoke { playerId = playerId, pos = pos, nextTurnPlayerId = nextTurnPlayerId };
            Notify(payload);
        }

        public void Say(System.Int32 playerId, System.String msg)
        {
            var payload = new IGameObserver_PayloadTable.Say_Invoke { playerId = playerId, msg = msg };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIGameObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIGameObserver Convert(IGameObserver value)
        {
            if (value == null) return null;
            var o = (GameObserver)value;
            return new SurrogateForIGameObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IGameObserver Convert(SurrogateForIGameObserver value)
        {
            if (value == null) return null;
            return new GameObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
#region Domain.Interface.IGameUserObserver

namespace Domain.Interface
{
    [PayloadTable(typeof(IGameUserObserver), PayloadTableKind.Notification)]
    public static class IGameUserObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Begin_Invoke),
                typeof(End_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class Begin_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;

            public Type GetInterfaceType()
            {
                return typeof(IGameUserObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameUserObserver)__target).Begin(gameId);
            }
        }

        [ProtoContract, TypeAlias]
        public class End_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;
            [ProtoMember(2)] public Domain.Interface.GameResult result;

            public Type GetInterfaceType()
            {
                return typeof(IGameUserObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameUserObserver)__target).End(gameId, result);
            }
        }
    }

    public class GameUserObserver : InterfacedObserver, IGameUserObserver
    {
        public GameUserObserver()
            : base(null, 0)
        {
        }

        public GameUserObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public GameUserObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void Begin(System.Int64 gameId)
        {
            var payload = new IGameUserObserver_PayloadTable.Begin_Invoke { gameId = gameId };
            Notify(payload);
        }

        public void End(System.Int64 gameId, Domain.Interface.GameResult result)
        {
            var payload = new IGameUserObserver_PayloadTable.End_Invoke { gameId = gameId, result = result };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIGameUserObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIGameUserObserver Convert(IGameUserObserver value)
        {
            if (value == null) return null;
            var o = (GameUserObserver)value;
            return new SurrogateForIGameUserObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IGameUserObserver Convert(SurrogateForIGameUserObserver value)
        {
            if (value == null) return null;
            return new GameUserObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
#region Domain.Interface.IUserEventObserver

namespace Domain.Interface
{
    [PayloadTable(typeof(IUserEventObserver), PayloadTableKind.Notification)]
    public static class IUserEventObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(UserContextChange_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class UserContextChange_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public Domain.Data.TrackableUserContextTracker userContextTracker;

            public Type GetInterfaceType()
            {
                return typeof(IUserEventObserver);
            }

            public void Invoke(object __target)
            {
                ((IUserEventObserver)__target).UserContextChange(userContextTracker);
            }
        }
    }

    public class UserEventObserver : InterfacedObserver, IUserEventObserver
    {
        public UserEventObserver()
            : base(null, 0)
        {
        }

        public UserEventObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public UserEventObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void UserContextChange(Domain.Data.TrackableUserContextTracker userContextTracker)
        {
            var payload = new IUserEventObserver_PayloadTable.UserContextChange_Invoke { userContextTracker = userContextTracker };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserEventObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIUserEventObserver Convert(IUserEventObserver value)
        {
            if (value == null) return null;
            var o = (UserEventObserver)value;
            return new SurrogateForIUserEventObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IUserEventObserver Convert(SurrogateForIUserEventObserver value)
        {
            if (value == null) return null;
            return new UserEventObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
#region Domain.Interface.IUserPairingObserver

namespace Domain.Interface
{
    [PayloadTable(typeof(IUserPairingObserver), PayloadTableKind.Notification)]
    public static class IUserPairingObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(MakePair_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class MakePair_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;
            [ProtoMember(2)] public System.String opponentName;

            public Type GetInterfaceType()
            {
                return typeof(IUserPairingObserver);
            }

            public void Invoke(object __target)
            {
                ((IUserPairingObserver)__target).MakePair(gameId, opponentName);
            }
        }
    }

    public class UserPairingObserver : InterfacedObserver, IUserPairingObserver
    {
        public UserPairingObserver()
            : base(null, 0)
        {
        }

        public UserPairingObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public UserPairingObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void MakePair(System.Int64 gameId, System.String opponentName)
        {
            var payload = new IUserPairingObserver_PayloadTable.MakePair_Invoke { gameId = gameId, opponentName = opponentName };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserPairingObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIUserPairingObserver Convert(IUserPairingObserver value)
        {
            if (value == null) return null;
            var o = (UserPairingObserver)value;
            return new SurrogateForIUserPairingObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IUserPairingObserver Convert(SurrogateForIUserPairingObserver value)
        {
            if (value == null) return null;
            return new UserPairingObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
