// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Actor;
using Akka.Interfaced;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region Domain.Interfaced.IGame

namespace Domain.Interfaced
{
    [PayloadTableForInterfacedActor(typeof(IGame))]
    public static class IGame_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(Join_Invoke), typeof(Join_Return)},
                {typeof(Leave_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class Join_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;
            [ProtoMember(2)] public System.String userName;
            [ProtoMember(3)] public Domain.Interfaced.GameObserver observer;
            [ProtoMember(4)] public Domain.Interfaced.GameUserObserver observerForUserActor;

            public Type GetInterfaceType() { return typeof(IGame); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IGame)target).Join(userId, userName, observer, observerForUserActor);
                return (IValueGetable)(new Join_Return { v = (System.Tuple<System.Int32, Domain.Interfaced.GameInfo>)__v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Join_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, Domain.Interfaced.GameInfo> v;

            public Type GetInterfaceType() { return typeof(IGame); }

            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class Leave_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;

            public Type GetInterfaceType() { return typeof(IGame); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IGame)target).Leave(userId);
                return null;
            }
        }
    }

    public interface IGame_NoReply
    {
        void Join(System.Int64 userId, System.String userName, Domain.Interfaced.IGameObserver observer, Domain.Interfaced.IGameUserObserver observerForUserActor);
        void Leave(System.Int64 userId);
    }

    [ProtoContract, TypeAlias]
    public class GameRef : InterfacedActorRef, IGame, IGame_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private GameRef()
            : base(null)
        {
        }

        public GameRef(IActorRef actor)
            : base(actor)
        {
        }

        public GameRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IGame_NoReply WithNoReply()
        {
            return this;
        }

        public GameRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GameRef(Actor, requestWaiter, Timeout);
        }

        public GameRef WithTimeout(TimeSpan? timeout)
        {
            return new GameRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<System.Int32, Domain.Interfaced.GameInfo>> Join(System.Int64 userId, System.String userName, Domain.Interfaced.IGameObserver observer, Domain.Interfaced.IGameUserObserver observerForUserActor)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGame_PayloadTable.Join_Invoke { userId = userId, userName = userName, observer = (Domain.Interfaced.GameObserver)observer, observerForUserActor = (Domain.Interfaced.GameUserObserver)observerForUserActor }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, Domain.Interfaced.GameInfo>>(requestMessage);
        }

        public Task Leave(System.Int64 userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGame_PayloadTable.Leave_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGame_NoReply.Join(System.Int64 userId, System.String userName, Domain.Interfaced.IGameObserver observer, Domain.Interfaced.IGameUserObserver observerForUserActor)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGame_PayloadTable.Join_Invoke { userId = userId, userName = userName, observer = (Domain.Interfaced.GameObserver)observer, observerForUserActor = (Domain.Interfaced.GameUserObserver)observerForUserActor }
            };
            SendRequest(requestMessage);
        }

        void IGame_NoReply.Leave(System.Int64 userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGame_PayloadTable.Leave_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region Domain.Interfaced.IGamePairMaker

namespace Domain.Interfaced
{
    [PayloadTableForInterfacedActor(typeof(IGamePairMaker))]
    public static class IGamePairMaker_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(RegisterPairing_Invoke), null},
                {typeof(UnregisterPairing_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class RegisterPairing_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;
            [ProtoMember(2)] public System.String userName;
            [ProtoMember(3)] public Domain.Interfaced.UserPairingObserver observer;

            public Type GetInterfaceType() { return typeof(IGamePairMaker); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IGamePairMaker)target).RegisterPairing(userId, userName, observer);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class UnregisterPairing_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 userId;

            public Type GetInterfaceType() { return typeof(IGamePairMaker); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IGamePairMaker)target).UnregisterPairing(userId);
                return null;
            }
        }
    }

    public interface IGamePairMaker_NoReply
    {
        void RegisterPairing(System.Int64 userId, System.String userName, Domain.Interfaced.IUserPairingObserver observer);
        void UnregisterPairing(System.Int64 userId);
    }

    [ProtoContract, TypeAlias]
    public class GamePairMakerRef : InterfacedActorRef, IGamePairMaker, IGamePairMaker_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private GamePairMakerRef()
            : base(null)
        {
        }

        public GamePairMakerRef(IActorRef actor)
            : base(actor)
        {
        }

        public GamePairMakerRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IGamePairMaker_NoReply WithNoReply()
        {
            return this;
        }

        public GamePairMakerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GamePairMakerRef(Actor, requestWaiter, Timeout);
        }

        public GamePairMakerRef WithTimeout(TimeSpan? timeout)
        {
            return new GamePairMakerRef(Actor, RequestWaiter, timeout);
        }

        public Task RegisterPairing(System.Int64 userId, System.String userName, Domain.Interfaced.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGamePairMaker_PayloadTable.RegisterPairing_Invoke { userId = userId, userName = userName, observer = (Domain.Interfaced.UserPairingObserver)observer }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UnregisterPairing(System.Int64 userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGamePairMaker_PayloadTable.UnregisterPairing_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGamePairMaker_NoReply.RegisterPairing(System.Int64 userId, System.String userName, Domain.Interfaced.IUserPairingObserver observer)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGamePairMaker_PayloadTable.RegisterPairing_Invoke { userId = userId, userName = userName, observer = (Domain.Interfaced.UserPairingObserver)observer }
            };
            SendRequest(requestMessage);
        }

        void IGamePairMaker_NoReply.UnregisterPairing(System.Int64 userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGamePairMaker_PayloadTable.UnregisterPairing_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region Domain.Interfaced.IGamePlayer

namespace Domain.Interfaced
{
    [PayloadTableForInterfacedActor(typeof(IGamePlayer))]
    public static class IGamePlayer_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(MakeMove_Invoke), null},
                {typeof(Say_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class MakeMove_Invoke : IInterfacedPayload, ITagOverridable, IAsyncInvokable
        {
            [ProtoMember(1)] public Domain.Game.PlacePosition pos;
            [ProtoMember(2)] public System.Int64 playerUserId;

            public Type GetInterfaceType() { return typeof(IGamePlayer); }

            public void SetTag(object value) { playerUserId = (System.Int64)value; }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IGamePlayer)target).MakeMove(pos, playerUserId);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class Say_Invoke : IInterfacedPayload, ITagOverridable, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String msg;
            [ProtoMember(2)] public System.Int64 playerUserId;

            public Type GetInterfaceType() { return typeof(IGamePlayer); }

            public void SetTag(object value) { playerUserId = (System.Int64)value; }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IGamePlayer)target).Say(msg, playerUserId);
                return null;
            }
        }
    }

    public interface IGamePlayer_NoReply
    {
        void MakeMove(Domain.Game.PlacePosition pos, System.Int64 playerUserId = 0);
        void Say(System.String msg, System.Int64 playerUserId = 0);
    }

    [ProtoContract, TypeAlias]
    public class GamePlayerRef : InterfacedActorRef, IGamePlayer, IGamePlayer_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private GamePlayerRef()
            : base(null)
        {
        }

        public GamePlayerRef(IActorRef actor)
            : base(actor)
        {
        }

        public GamePlayerRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IGamePlayer_NoReply WithNoReply()
        {
            return this;
        }

        public GamePlayerRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GamePlayerRef(Actor, requestWaiter, Timeout);
        }

        public GamePlayerRef WithTimeout(TimeSpan? timeout)
        {
            return new GamePlayerRef(Actor, RequestWaiter, timeout);
        }

        public Task MakeMove(Domain.Game.PlacePosition pos, System.Int64 playerUserId = 0)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGamePlayer_PayloadTable.MakeMove_Invoke { pos = pos, playerUserId = playerUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Say(System.String msg, System.Int64 playerUserId = 0)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGamePlayer_PayloadTable.Say_Invoke { msg = msg, playerUserId = playerUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGamePlayer_NoReply.MakeMove(Domain.Game.PlacePosition pos, System.Int64 playerUserId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGamePlayer_PayloadTable.MakeMove_Invoke { pos = pos, playerUserId = playerUserId }
            };
            SendRequest(requestMessage);
        }

        void IGamePlayer_NoReply.Say(System.String msg, System.Int64 playerUserId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IGamePlayer_PayloadTable.Say_Invoke { msg = msg, playerUserId = playerUserId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region Domain.Interfaced.IUser

namespace Domain.Interfaced
{
    [PayloadTableForInterfacedActor(typeof(IUser))]
    public static class IUser_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(JoinGame_Invoke), typeof(JoinGame_Return)},
                {typeof(LeaveGame_Invoke), null},
                {typeof(RegisterPairing_Invoke), null},
                {typeof(UnregisterPairing_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class JoinGame_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;
            [ProtoMember(2)] public System.Int32 observerId;

            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUser)target).JoinGame(gameId, observerId);
                return (IValueGetable)(new JoinGame_Return { v = (System.Tuple<System.Int32, System.Int32, Domain.Interfaced.GameInfo>)__v });
            }
        }

        [ProtoContract, TypeAlias]
        public class JoinGame_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, System.Int32, Domain.Interfaced.GameInfo> v;

            public Type GetInterfaceType() { return typeof(IUser); }

            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class LeaveGame_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;

            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUser)target).LeaveGame(gameId);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class RegisterPairing_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.Int32 observerId;

            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUser)target).RegisterPairing(observerId);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class UnregisterPairing_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUser)target).UnregisterPairing();
                return null;
            }
        }
    }

    public interface IUser_NoReply
    {
        void JoinGame(System.Int64 gameId, System.Int32 observerId);
        void LeaveGame(System.Int64 gameId);
        void RegisterPairing(System.Int32 observerId);
        void UnregisterPairing();
    }

    [ProtoContract, TypeAlias]
    public class UserRef : InterfacedActorRef, IUser, IUser_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private UserRef()
            : base(null)
        {
        }

        public UserRef(IActorRef actor)
            : base(actor)
        {
        }

        public UserRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IUser_NoReply WithNoReply()
        {
            return this;
        }

        public UserRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserRef(Actor, requestWaiter, Timeout);
        }

        public UserRef WithTimeout(TimeSpan? timeout)
        {
            return new UserRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<System.Int32, System.Int32, Domain.Interfaced.GameInfo>> JoinGame(System.Int64 gameId, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.JoinGame_Invoke { gameId = gameId, observerId = observerId }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, System.Int32, Domain.Interfaced.GameInfo>>(requestMessage);
        }

        public Task LeaveGame(System.Int64 gameId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.LeaveGame_Invoke { gameId = gameId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task RegisterPairing(System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.RegisterPairing_Invoke { observerId = observerId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UnregisterPairing()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.UnregisterPairing_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUser_NoReply.JoinGame(System.Int64 gameId, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.JoinGame_Invoke { gameId = gameId, observerId = observerId }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.LeaveGame(System.Int64 gameId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.LeaveGame_Invoke { gameId = gameId }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.RegisterPairing(System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.RegisterPairing_Invoke { observerId = observerId }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.UnregisterPairing()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.UnregisterPairing_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region Domain.Interfaced.IUserLogin

namespace Domain.Interfaced
{
    [PayloadTableForInterfacedActor(typeof(IUserLogin))]
    public static class IUserLogin_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(Login_Invoke), typeof(Login_Return)},
            };
        }

        [ProtoContract, TypeAlias]
        public class Login_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String id;
            [ProtoMember(2)] public System.String password;
            [ProtoMember(3)] public System.Int32 observerId;

            public Type GetInterfaceType() { return typeof(IUserLogin); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUserLogin)target).Login(id, password, observerId);
                return (IValueGetable)(new Login_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Login_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public Domain.Interfaced.LoginResult v;

            public Type GetInterfaceType() { return typeof(IUserLogin); }

            public object Value { get { return v; } }
        }
    }

    public interface IUserLogin_NoReply
    {
        void Login(System.String id, System.String password, System.Int32 observerId);
    }

    [ProtoContract, TypeAlias]
    public class UserLoginRef : InterfacedActorRef, IUserLogin, IUserLogin_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private UserLoginRef()
            : base(null)
        {
        }

        public UserLoginRef(IActorRef actor)
            : base(actor)
        {
        }

        public UserLoginRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IUserLogin_NoReply WithNoReply()
        {
            return this;
        }

        public UserLoginRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserLoginRef(Actor, requestWaiter, Timeout);
        }

        public UserLoginRef WithTimeout(TimeSpan? timeout)
        {
            return new UserLoginRef(Actor, RequestWaiter, timeout);
        }

        public Task<Domain.Interfaced.LoginResult> Login(System.String id, System.String password, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observerId = observerId }
            };
            return SendRequestAndReceive<Domain.Interfaced.LoginResult>(requestMessage);
        }

        void IUserLogin_NoReply.Login(System.String id, System.String password, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observerId = observerId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region Domain.Interfaced.IGameObserver

namespace Domain.Interfaced
{
    public static class IGameObserver_PayloadTable
    {
        [ProtoContract, TypeAlias]
        public class Join_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int32 playerId;
            [ProtoMember(2)] public System.Int64 userId;
            [ProtoMember(3)] public System.String userName;

            public void Invoke(object target)
            {
                ((IGameObserver)target).Join(playerId, userId, userName);
            }
        }

        [ProtoContract, TypeAlias]
        public class Leave_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int32 playerId;

            public void Invoke(object target)
            {
                ((IGameObserver)target).Leave(playerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Begin_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int32 currentPlayerId;

            public void Invoke(object target)
            {
                ((IGameObserver)target).Begin(currentPlayerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class MakeMove_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int32 playerId;
            [ProtoMember(2)] public Domain.Game.PlacePosition pos;
            [ProtoMember(3)] public System.Int32 nextTurnPlayerId;

            public void Invoke(object target)
            {
                ((IGameObserver)target).MakeMove(playerId, pos, nextTurnPlayerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Say_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int32 playerId;
            [ProtoMember(2)] public System.String msg;

            public void Invoke(object target)
            {
                ((IGameObserver)target).Say(playerId, msg);
            }
        }

        [ProtoContract, TypeAlias]
        public class End_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int32 winnerPlayerId;

            public void Invoke(object target)
            {
                ((IGameObserver)target).End(winnerPlayerId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Abort_Invoke : IInvokable
        {
            public void Invoke(object target)
            {
                ((IGameObserver)target).Abort();
            }
        }
    }

    [ProtoContract, TypeAlias]
    public class GameObserver : InterfacedObserver, IGameObserver
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return Channel != null ? (ActorRefBase)(((ActorNotificationChannel)Channel).Actor) : null; }
            set { Channel = new ActorNotificationChannel(value); }
        }

        [ProtoMember(2)] private int _observerId
        {
            get { return ObserverId; }
            set { ObserverId = value; }
        }

        private GameObserver()
            : base(null, 0)
        {
        }

        public GameObserver(IActorRef target, int observerId)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public GameObserver(INotificationChannel channel, int observerId)
            : base(channel, observerId)
        {
        }

        public void Join(System.Int32 playerId, System.Int64 userId, System.String userName)
        {
            var payload = new IGameObserver_PayloadTable.Join_Invoke { playerId = playerId, userId = userId, userName = userName };
            Notify(payload);
        }

        public void Leave(System.Int32 playerId)
        {
            var payload = new IGameObserver_PayloadTable.Leave_Invoke { playerId = playerId };
            Notify(payload);
        }

        public void Begin(System.Int32 currentPlayerId)
        {
            var payload = new IGameObserver_PayloadTable.Begin_Invoke { currentPlayerId = currentPlayerId };
            Notify(payload);
        }

        public void MakeMove(System.Int32 playerId, Domain.Game.PlacePosition pos, System.Int32 nextTurnPlayerId)
        {
            var payload = new IGameObserver_PayloadTable.MakeMove_Invoke { playerId = playerId, pos = pos, nextTurnPlayerId = nextTurnPlayerId };
            Notify(payload);
        }

        public void Say(System.Int32 playerId, System.String msg)
        {
            var payload = new IGameObserver_PayloadTable.Say_Invoke { playerId = playerId, msg = msg };
            Notify(payload);
        }

        public void End(System.Int32 winnerPlayerId)
        {
            var payload = new IGameObserver_PayloadTable.End_Invoke { winnerPlayerId = winnerPlayerId };
            Notify(payload);
        }

        public void Abort()
        {
            var payload = new IGameObserver_PayloadTable.Abort_Invoke {  };
            Notify(payload);
        }
    }
}

#endregion

#region Domain.Interfaced.IGameUserObserver

namespace Domain.Interfaced
{
    public static class IGameUserObserver_PayloadTable
    {
        [ProtoContract, TypeAlias]
        public class Begin_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;

            public void Invoke(object target)
            {
                ((IGameUserObserver)target).Begin(gameId);
            }
        }

        [ProtoContract, TypeAlias]
        public class End_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;
            [ProtoMember(2)] public Domain.Interfaced.GameResult result;

            public void Invoke(object target)
            {
                ((IGameUserObserver)target).End(gameId, result);
            }
        }
    }

    [ProtoContract, TypeAlias]
    public class GameUserObserver : InterfacedObserver, IGameUserObserver
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return Channel != null ? (ActorRefBase)(((ActorNotificationChannel)Channel).Actor) : null; }
            set { Channel = new ActorNotificationChannel(value); }
        }

        [ProtoMember(2)] private int _observerId
        {
            get { return ObserverId; }
            set { ObserverId = value; }
        }

        private GameUserObserver()
            : base(null, 0)
        {
        }

        public GameUserObserver(IActorRef target, int observerId)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public GameUserObserver(INotificationChannel channel, int observerId)
            : base(channel, observerId)
        {
        }

        public void Begin(System.Int64 gameId)
        {
            var payload = new IGameUserObserver_PayloadTable.Begin_Invoke { gameId = gameId };
            Notify(payload);
        }

        public void End(System.Int64 gameId, Domain.Interfaced.GameResult result)
        {
            var payload = new IGameUserObserver_PayloadTable.End_Invoke { gameId = gameId, result = result };
            Notify(payload);
        }
    }
}

#endregion

#region Domain.Interfaced.IUserEventObserver

namespace Domain.Interfaced
{
    public static class IUserEventObserver_PayloadTable
    {
        [ProtoContract, TypeAlias]
        public class UserContextChange_Invoke : IInvokable
        {
            [ProtoMember(1)] public Domain.Data.TrackableUserContextTracker userContextTracker;

            public void Invoke(object target)
            {
                ((IUserEventObserver)target).UserContextChange(userContextTracker);
            }
        }
    }

    [ProtoContract, TypeAlias]
    public class UserEventObserver : InterfacedObserver, IUserEventObserver
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return Channel != null ? (ActorRefBase)(((ActorNotificationChannel)Channel).Actor) : null; }
            set { Channel = new ActorNotificationChannel(value); }
        }

        [ProtoMember(2)] private int _observerId
        {
            get { return ObserverId; }
            set { ObserverId = value; }
        }

        private UserEventObserver()
            : base(null, 0)
        {
        }

        public UserEventObserver(IActorRef target, int observerId)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public UserEventObserver(INotificationChannel channel, int observerId)
            : base(channel, observerId)
        {
        }

        public void UserContextChange(Domain.Data.TrackableUserContextTracker userContextTracker)
        {
            var payload = new IUserEventObserver_PayloadTable.UserContextChange_Invoke { userContextTracker = userContextTracker };
            Notify(payload);
        }
    }
}

#endregion

#region Domain.Interfaced.IUserPairingObserver

namespace Domain.Interfaced
{
    public static class IUserPairingObserver_PayloadTable
    {
        [ProtoContract, TypeAlias]
        public class MakePair_Invoke : IInvokable
        {
            [ProtoMember(1)] public System.Int64 gameId;
            [ProtoMember(2)] public System.String opponentName;

            public void Invoke(object target)
            {
                ((IUserPairingObserver)target).MakePair(gameId, opponentName);
            }
        }
    }

    [ProtoContract, TypeAlias]
    public class UserPairingObserver : InterfacedObserver, IUserPairingObserver
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return Channel != null ? (ActorRefBase)(((ActorNotificationChannel)Channel).Actor) : null; }
            set { Channel = new ActorNotificationChannel(value); }
        }

        [ProtoMember(2)] private int _observerId
        {
            get { return ObserverId; }
            set { ObserverId = value; }
        }

        private UserPairingObserver()
            : base(null, 0)
        {
        }

        public UserPairingObserver(IActorRef target, int observerId)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public UserPairingObserver(INotificationChannel channel, int observerId)
            : base(channel, observerId)
        {
        }

        public void MakePair(System.Int64 gameId, System.String opponentName)
        {
            var payload = new IUserPairingObserver_PayloadTable.MakePair_Invoke { gameId = gameId, opponentName = opponentName };
            Notify(payload);
        }
    }
}

#endregion
