// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Actor;
using Akka.Interfaced;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region Domain.Interfaced.IUser

namespace Domain.Interfaced
{
    [PayloadTableForInterfacedActor(typeof(IUser))]
    public static class IUser_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(GetId_Invoke), typeof(GetId_Return)},
            };
        }

        [ProtoContract, TypeAlias]
        public class GetId_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType() { return typeof(IUser); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUser)target).GetId();
                return (IValueGetable)(new GetId_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetId_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.String v;

            public Type GetInterfaceType() { return typeof(IUser); }

            public object Value { get { return v; } }
        }
    }

    public interface IUser_NoReply
    {
        void GetId();
    }

    [ProtoContract, TypeAlias]
    public class UserRef : InterfacedActorRef, IUser, IUser_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private UserRef()
            : base(null)
        {
        }

        public UserRef(IActorRef actor)
            : base(actor)
        {
        }

        public UserRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IUser_NoReply WithNoReply()
        {
            return this;
        }

        public UserRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserRef(Actor, requestWaiter, Timeout);
        }

        public UserRef WithTimeout(TimeSpan? timeout)
        {
            return new UserRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.String> GetId()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.GetId_Invoke {  }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        void IUser_NoReply.GetId()
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUser_PayloadTable.GetId_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region Domain.Interfaced.IUserDirectory

namespace Domain.Interfaced
{
    [PayloadTableForInterfacedActor(typeof(IUserDirectory))]
    public static class IUserDirectory_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(GetUser_Invoke), typeof(GetUser_Return)},
                {typeof(RegisterUser_Invoke), null},
                {typeof(UnregisterUser_Invoke), null},
            };
        }

        [ProtoContract, TypeAlias]
        public class GetUser_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public Type GetInterfaceType() { return typeof(IUserDirectory); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUserDirectory)target).GetUser(userId);
                return (IValueGetable)(new GetUser_Return { v = (Domain.Interfaced.UserRef)__v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetUser_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public Domain.Interfaced.UserRef v;

            public Type GetInterfaceType() { return typeof(IUserDirectory); }

            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class RegisterUser_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String userId;
            [ProtoMember(2)] public Domain.Interfaced.UserRef user;

            public Type GetInterfaceType() { return typeof(IUserDirectory); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUserDirectory)target).RegisterUser(userId, user);
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class UnregisterUser_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public Type GetInterfaceType() { return typeof(IUserDirectory); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                await ((IUserDirectory)target).UnregisterUser(userId);
                return null;
            }
        }
    }

    public interface IUserDirectory_NoReply
    {
        void GetUser(System.String userId);
        void RegisterUser(System.String userId, Domain.Interfaced.IUser user);
        void UnregisterUser(System.String userId);
    }

    [ProtoContract, TypeAlias]
    public class UserDirectoryRef : InterfacedActorRef, IUserDirectory, IUserDirectory_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private UserDirectoryRef()
            : base(null)
        {
        }

        public UserDirectoryRef(IActorRef actor)
            : base(actor)
        {
        }

        public UserDirectoryRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IUserDirectory_NoReply WithNoReply()
        {
            return this;
        }

        public UserDirectoryRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserDirectoryRef(Actor, requestWaiter, Timeout);
        }

        public UserDirectoryRef WithTimeout(TimeSpan? timeout)
        {
            return new UserDirectoryRef(Actor, RequestWaiter, timeout);
        }

        public Task<Domain.Interfaced.IUser> GetUser(System.String userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserDirectory_PayloadTable.GetUser_Invoke { userId = userId }
            };
            return SendRequestAndReceive<Domain.Interfaced.IUser>(requestMessage);
        }

        public Task RegisterUser(System.String userId, Domain.Interfaced.IUser user)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserDirectory_PayloadTable.RegisterUser_Invoke { userId = userId, user = (Domain.Interfaced.UserRef)user }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task UnregisterUser(System.String userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserDirectory_PayloadTable.UnregisterUser_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUserDirectory_NoReply.GetUser(System.String userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserDirectory_PayloadTable.GetUser_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }

        void IUserDirectory_NoReply.RegisterUser(System.String userId, Domain.Interfaced.IUser user)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserDirectory_PayloadTable.RegisterUser_Invoke { userId = userId, user = (Domain.Interfaced.UserRef)user }
            };
            SendRequest(requestMessage);
        }

        void IUserDirectory_NoReply.UnregisterUser(System.String userId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserDirectory_PayloadTable.UnregisterUser_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion

#region Domain.Interfaced.IUserLogin

namespace Domain.Interfaced
{
    [PayloadTableForInterfacedActor(typeof(IUserLogin))]
    public static class IUserLogin_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,]
            {
                {typeof(Login_Invoke), typeof(Login_Return)},
            };
        }

        [ProtoContract, TypeAlias]
        public class Login_Invoke : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String id;
            [ProtoMember(2)] public System.String password;
            [ProtoMember(3)] public System.Int32 observerId;

            public Type GetInterfaceType() { return typeof(IUserLogin); }

            public async Task<IValueGetable> InvokeAsync(object target)
            {
                var __v = await((IUserLogin)target).Login(id, password, observerId);
                return (IValueGetable)(new Login_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Login_Return : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32 v;

            public Type GetInterfaceType() { return typeof(IUserLogin); }

            public object Value { get { return v; } }
        }
    }

    public interface IUserLogin_NoReply
    {
        void Login(System.String id, System.String password, System.Int32 observerId);
    }

    [ProtoContract, TypeAlias]
    public class UserLoginRef : InterfacedActorRef, IUserLogin, IUserLogin_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private UserLoginRef()
            : base(null)
        {
        }

        public UserLoginRef(IActorRef actor)
            : base(actor)
        {
        }

        public UserLoginRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout)
            : base(actor, requestWaiter, timeout)
        {
        }

        public IUserLogin_NoReply WithNoReply()
        {
            return this;
        }

        public UserLoginRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserLoginRef(Actor, requestWaiter, Timeout);
        }

        public UserLoginRef WithTimeout(TimeSpan? timeout)
        {
            return new UserLoginRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Int32> Login(System.String id, System.String password, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observerId = observerId }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        void IUserLogin_NoReply.Login(System.String id, System.String password, System.Int32 observerId)
        {
            var requestMessage = new RequestMessage
            {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observerId = observerId }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
